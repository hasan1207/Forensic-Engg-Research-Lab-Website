<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Enhance Interior Design</title>
  <%- include("partials/headerFiles") %>
</head>
<body class="bg-light">
  <%- include("partials/navBar") %>
  <div class="container py-4">
    <h1 class="text-center mb-4">Enhance Interior Design</h1>

    <button class="btn btn-secondary position-absolute" style="top: 100px; right: 20px; z-index: 1100;" 
      type="button" data-bs-toggle="offcanvas" data-bs-target="#galleryOffcanvas" aria-controls="galleryOffcanvas" id="openGalleryBtn">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" stroke="white" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">
        <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
        <circle cx="9" cy="9" r="2"></circle>
        <path d="M21 15l-5-5L5 21"></path>
      </svg>
      Open Gallery
    </button>

    <div class="mb-3 text-center">
      <input type="file" id="imageUpload" accept="image/*" class="form-control w-50 mx-auto">
    </div>

    <%- include("partials/modelStatus") %>

    <div class="img-con">
        <div id="imageContainer" class="blank-image-container">
          <img id="blankImg" src="/images/landscape.webp" alt="Blank Image">
          
        </div>
    </div>

    <div class="control-section">
      <div class="row">
        <div class="col-md-6">
          <label for="prompt" class="form-label">Prompt:</label>
          <input type="text" id="prompt" class="form-control" placeholder="Enter prompt text">
        </div>
      </div>
    </div>

    <div class="img-con">
      <div id="imageContainer" class="canvas-image-container">
        <img id="generatedImg" class="gen-img" src="/images/checkers.jpg" alt="Generated Image">
        
        <%- include("partials/progressRing") %>
        <%- include("partials/saveIcon") %>
      </div>
    </div>

    <div id="controls" class="d-flex justify-content-center gap-3">
      <button id="enhanceBtn" class="btn btn-primary">Enhance</button>
    </div>
  </div> <!-- Closing container div -->

  <div class="offcanvas offcanvas-end" tabindex="-1" id="galleryOffcanvas" aria-labelledby="galleryOffcanvasLabel" style="z-index: 1101;">
    <div class="offcanvas-header">
      <h5 class="offcanvas-title" id="galleryOffcanvasLabel">Select an Image</h5>
      <button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
      <div id="galleryThumbnails" class="d-flex flex-wrap gap-3"></div>
    </div>
  </div>

  <%- include("partials/footer") %>
  <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.9.6/lottie.min.js"></script> -->
  <%- include("partials/codeFiles") %>
  <!-- <script>

    const saveLoader = lottie.loadAnimation({
        container: document.getElementById("saveLoader"),
        renderer: "svg",
        loop: true,
        autoplay: false,
        path: "./images/save.json",
    
    });

    let globalWidth = 768;
    let globalHeight = 576;
    let generatedImage = "";
    let imgPrompt = "";
    loadThumbnails();
    const imageUpload = document.getElementById("imageUpload");
    const uploadedImage = document.getElementById("generatedImg");
    const blankImg = document.getElementById("blankImg");
    const enhanceBtn = document.getElementById("enhanceBtn");

    imageUpload.addEventListener("change", (event) => {
        const file = event.target.files[0];
        if (!file) return;
      
        const reader = new FileReader();
        reader.onload = (e) => {
          
          blankImg.src = e.target.result;
      
          
          const tempImg = new Image();
          tempImg.onload = function () {
            
            
            if (blankImg) {
                blankImg.style.width = `${tempImg.width}px`;
                blankImg.style.height = `${tempImg.height}px`;
            }

            
            if (uploadedImage) {
                uploadedImage.src = "images/checkers.jpg";
                uploadedImage.style.width = `${tempImg.width}px`;
                uploadedImage.style.height = `${tempImg.height}px`;
            }

            globalWidth = tempImg.width;
            globalHeight = tempImg.height;

            console.log(globalWidth, globalHeight);

            const saveIconBox = document.getElementById("saveIconBox");
            if (saveIconBox) {
                saveIconBox.style.right = `calc(50% - ${tempImg.width / 2}px + 12px)`;
            }
    
          };
          tempImg.src = e.target.result;
        };
        reader.readAsDataURL(file);
      });












      function loadThumbnails(){
        fetch("/images")
        .then(response => {
            if (!response.ok) throw new Error("Failed to fetch images");
            return response.json();
        })
        .then(data => {
            const imgs = data.gallery;
            let images = Array.from(imgs);
            const galleryThumbnailsContainer = document.getElementById("galleryThumbnails");
            galleryThumbnailsContainer.innerHTML = "";
    
    
            if (!galleryThumbnailsContainer) {
                console.error("Gallery container not found");
                return;
            }
    
            images.forEach((item) => {
                console.log("Creating thumbnail for:", item.imageUrl);
    
                const thumb = document.createElement("img");
                thumb.src = item.imageUrl;
                thumb.alt = item.prompt;
                thumb.classList.add("img-thumbnail", "gallery-thumb");
                thumb.setAttribute("data-image-src", item.imageUrl);
    
                galleryThumbnailsContainer.appendChild(thumb);
            });
    
            galleryThumbnailsContainer.addEventListener("click", (event) => {
                const target = event.target;
                
                if (target.classList.contains("gallery-thumb")) {
                    console.log("Target2:", target);
                    const selectedImageSrc = target.getAttribute("src");

    
    
              const tempImg = new Image();
              tempImg.onload = function () {
                //const genImg = document.querySelector(".gen-img");
                if (uploadedImage) {
                    uploadedImage.style.width = `${tempImg.width}px`;
                    uploadedImage.style.height = `${tempImg.height}px`;

                    globalWidth = tempImg.width;
                    globalHeight = tempImg.height;

                    console.log(globalWidth, globalHeight);
                }
                if(blankImg){
                    blankImg.style.width = `${tempImg.width}px`;
                    blankImg.style.height = `${tempImg.height}px`;
                    

                }

    
                const saveIconBox = document.getElementById("saveIconBox");
                if (saveIconBox) {
                    saveIconBox.style.right = `calc(50% - ${tempImg.width / 2}px + 12px)`;
                }
            }
    
            tempImg.src = selectedImageSrc;
            
                    if (blankImg) {
                        getBase64FromUrl(selectedImageSrc).then((base64) => {
                            blankImg.src = "data:image/png;base64," + base64;
                    
                            
                        }).catch((error) => {
                            console.error("Error converting image to Base64:", error);
                            alert("Failed to load the image.");
                        });
                    }
    
                    const galleryOffcanvas = bootstrap.Offcanvas.getInstance(document.getElementById("galleryOffcanvas"));
                    if (galleryOffcanvas) {
                        galleryOffcanvas.hide();
                    }
                }
            });
        })
        .catch(error => console.error("Error:", error));
    }

    async function getBase64FromUrl(url) {
        try {
            const response = await fetch(url);
            const blob = await response.blob();
    
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onloadend = () => resolve(reader.result.split(",")[1]);
                reader.onerror = reject;
                reader.readAsDataURL(blob);
            });
        } catch (error) {
            console.error("Error fetching image:", error);
            alert("Failed to fetch the image from the provided URL.");
        }
    }



    enhanceBtn.addEventListener("click", async () => {
        uploadedImage.src = "images/checkers.jpg";

        

        if (!blankImg.src) {
            alert("Please upload an image first.");
            console.log(globalWidth, globalHeight);
            return;
          }
        
        const prompt = document.getElementById("prompt").value.trim();
        imgPrompt = "Enhanced: <br> " + prompt;
        const originalBase64 = blankImg.src.replace(/^data:image\/\w+;base64,/, '');
        document.getElementById("imageUpload").value = "";
        const payload = {

            "init_images": [`data:image/png;base64,${originalBase64}`],
            "prompt": prompt,
            "negative_prompt": "",
            "steps": 20,
            "sampler_name": "DPM++ 2M",
            "scheduler": "Automatic",
            //override_settings: { sd_model_checkpoint: "realisticVisionV60B1_v51HyperVAE.safetensors" },
            "denoising_strength": 0.75,
            "cfg_scale": 7,
            "width": globalWidth,
            "height": globalHeight,

          }

          console.log(payload);

        

        const progPercentage = document.querySelector('#progPercentage');
                  const progressRing = document.querySelector('.progress-ring-circle');
                  progPercentage.innerHTML = "";
                  progressRing.style.strokeDashoffset = 188.4;
            
            
              progContainer.classList.remove("d-none");
              try {
            
                const progressPromise = trackProgress();
                const response = await fetch(`https://a1a8-49-205-87-233.ngrok-free.app/depth`, {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify(payload),
                  mode: "cors"
                });
                const data = await response.json();
            
                await progressPromise;
                console.log("Response from API:", data);
                
                const base64Image = data.images[0];
                generatedImage = base64Image;
                document.getElementById("imageUpload").value = "";
                
                uploadedImage.src = `data:image/png;base64,${base64Image}`;
                
                
            
                progContainer.classList.add("d-none");
              } catch (err) {
                console.error("Error:", err);
              }
    });

    async function trackProgress() {
        const progPercentage = document.querySelector('#progPercentage');
        const progressRing = document.querySelector('.progress-ring-circle');
        const generatedImg = document.getElementById("generatedImg");
    
        let steps = 0;
    
        return new Promise((resolve) => {
            const interval = setInterval(async () => {
                try {
                    console.log("Fetching progress...");
    
                    const response = await fetch(`https://a1a8-49-205-87-233.ngrok-free.app/progress`, {
                        method: "GET",
                        headers: {
                            "Content-Type": "application/json",
                            "ngrok-skip-browser-warning": "true"
                        },
                        mode: "cors"
                    });
    
                    const contentType = response.headers.get("content-type");
                    if (!contentType || !contentType.includes("application/json")) {
                        const rawText = await response.text();
                        console.error("Unexpected Response (Not JSON):", rawText);
                        throw new Error("Server did not return JSON");
                    }
    
                    const progressData = await response.json();
                    console.log("Progress Data:", progressData);
    
                    let progress = Math.round(progressData.progress * 100);
                    let base64Image = progressData.current_image;
                    if (base64Image) {
                        generatedImg.src = `data:image/png;base64,${base64Image}`;
                    }
    
                    progress = Math.max(0, Math.min(progress, 100));
                    
    
                    let secs = Math.round(progressData.eta_relative);
    
                    const circumference = 188.4;
                    const strokeOffset = circumference * (1 - progress / 100);
                    progressRing.style.strokeDashoffset = strokeOffset;
    
                    progPercentage.innerHTML = `<span style='height:24px;'>${secs}</span><span id='sectxt' style='font-size: 9px; height:50%;'>secs</span>`;
    
                    if (progress >= 88 || (steps > 0 && progress == 0)) {
                        progPercentage.innerHTML = "<span style='height:24px;'>0</span><span id='sectxt' style='font-size: 9px; height:50%;'>secs</span>";
                        progressRing.style.strokeDashoffset = 0;  
                        clearInterval(interval);
                        resolve();
                    }
                    steps++;
    
                } catch (error) {
                    console.error("Error tracking progress:", error);
                    clearInterval(interval);
                    resolve();
                }
            }, 2500);
        });
    }







    const saveButton = document.getElementById("saveIcon");
if(window.location.pathname == "/enhance") {
    if (saveButton) {
        saveButton.addEventListener("click", async () => {
            try {
                saveLoader.play();
                const urlAndID = await saveImageToCloudinary(generatedImage);
                console.log('URL returned:', urlAndID.url);
                console.log('Public ID returned:', urlAndID.public_id);
    
                if (window.location.pathname === "/enhance") {
    
                    const response = await fetch("/saveImg", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ prompt: imgPrompt, imageUrl: urlAndID.url, publicId: urlAndID.public_id }),
                        mode: "cors"
                    });
    
                    if (response.ok) {
                        const data = await response.json();
                        console.log("Image saved successfully:", data);
                        saveLoader.stop();
                        //alert("Image saved successfully!");
                    } else {
                        const errorData = await response.json();
                        console.error("Error saving image:", errorData.error);
                        alert("Error saving image!");
                        saveLoader.stop();
                    }
                }
            } catch (error) {
                console.error('Failed to upload image:', error);
            }
        });
    }
}

async function saveImageToCloudinary(base64Image) {
    try {
      const response = await fetch('/upload-image', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ image: base64Image }),
        mode: "cors"
        
      });
  
      if (!response.ok) {
        throw new Error('Failed to upload image');
      }
  
      const data = await response.json();

      return {
        url: data.url,
        public_id: data.public_id
    };
    } catch (error) {
      console.error('Error:', error);
      throw error;
    }
}
    
    
  </script> -->
</body>
</html>